/**
 * PassportJS authentication middleware
 * Json Web Token (JWT) Strategy
 * https://github.com/themikenicholson/passport-jwt
 *
 * $ npm install --save passport-jwt
 *
 * Principles:
 * 1. First you need to get token, which usualy is generated after successful login by username:pass .
 * Jwt token is generated by calling POST /examples/auth/passport/jwtstrategy-gettoken
 * eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3YTYwMTY4NGFhZGY3ZTgzYWViZTJlNSIsImlhdCI6MTQ3MDU3MTU2MX0.zwSfbzW6bgYF1D1-yktY86daez-bSgs5YUNQZV1bVoU
 *
 * 2. put that token into header: Authorization: JWT < token >
 * 3. request GET /some/endpoint
 * 4. JWT Strategy takes env.jwt_secret and decodes jwt_payload
 */
const passport = require('passport');
const { Strategy, ExtractJwt } = require('passport-jwt');
const { users_model } = require('../../models/index.js');
const env = require('../../lib/envFetch.js');


// define strategy for dashboard login ('users' collection, used username:password to generate JWT token)
module.exports.defineStrategy4users = () => {

  const jwtOpts = {
    secretOrKey: env.jwt_secret,
    jwtFromRequest: ExtractJwt.fromAuthHeaderWithScheme('jwt')
  };

  passport.use('jwt-users', new Strategy(jwtOpts, (jwt_payload, done) => {
    // jwt_payload is decoded payload
    // console.log('jwt_payload:\n', JSON.stringify(jwt_payload, null, 2));

    const moQuery = {
      _id: jwt_payload.id,
      username: jwt_payload.username
    };

    users_model.getOne(moQuery)
      .then(userDoc => {
        if (!userDoc) { // when user is not found
          const err = new Error('Bad token! User id and username given by payload are wrong.');
          err.status = 403;
          done(err, false);
        } else if (!userDoc.is_active) {
          const err = new Error('User is not activated.');
          err.status = 403;
          done(err, false);
        } else {
          done(null, userDoc); // 'userDoc' is transfered into req.user and can be used in controller
        }
        return null; // prevent BPromise Warning: a promise was created in a handler at /web/node/dex8/dex8-api/server/app/middlewares/auth/passportstrategy_jwt.js:54:9 but was not returned from it, see http://goo.gl/rRqMUw
      })
      .catch(err => done(err));

  }));
};
/*
jwt_payload:
{
  "id": "57a72695370bc50962e345fe",
  "username": "sasa",
  "iat": 1470572244
}
 */
